#!/bin/env python

from filecmp import cmp
from jinja2 import Template
from netifaces import interfaces, ifaddresses, AF_INET6
from shutil import copyfile
from tempfile import mkstemp
import netaddr,os, subprocess

addr_list = []
myprefix_list = []
prefix_list = []
route_list = []

class PrefixException(Exception):
    def __init___(self,msg,prefixes):
      Exception.__init__(self,msg,prefixes)

for ifaceName in interfaces():
    if ifaceName == 'lo':
      continue

    addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET6, [{'addr':'No IP addr'}] )]
    for a in addresses:
      if a.lower().startswith('fe80:'):
        addresses.remove(a)
    addr_list.extend(addresses)

    routes = subprocess.Popen(
      ['/usr/sbin/ip', '-6', 'route', 'list', 'dev', ifaceName, 'proto', 'kernel'],
      stdout=subprocess.PIPE)
    for line in routes.stdout.readlines():
      p = line.split()[0]
      if p.lower().startswith('fe80:'):
        continue
      route_list.append(p)
print(route_list)

for p in route_list:
  for a in addr_list:
    if len(netaddr.cidr_merge([a,p])) == 1:
      if netaddr.IPNetwork(p).prefixlen < 64:
        prefix_list.append(p)
      else:
        myprefix_list.append(p)
    else:
      if netaddr.IPNetwork(p).prefixlen < 64:
        prefix_list.remove(p)
      else:
        myprefix_list.remove(p)

if len(prefix_list) == 0:
  raise PrefixException("No adequate prefixes found: size must be <= /63", None)
elif len(prefix_list) > 1:
  raise PrefixException("Too many prefixes - unsure how to proceed", prefix_list)

config = Template('''# generated by {{ script }}
#
default-lease-time 3600;
max-lease-time 7200;
log-facility local7;
option dhcp6.name-servers 2001:558:FEED::1,2001:558:FEED::2;
subnet6 {{ subnet6 }} {
       # Range for clients
       range6 {{ range_start }} {{ range_end }};
       # Prefix range for delegation to sub-routers
       prefix6 {{ prefix_start }} {{ prefix_end }} /64;
}

''')

ip = netaddr.IPNetwork(prefix_list[0])
delegations = list(ip.subnet(64))

fd, temp_file = mkstemp(prefix="dhcp6s.")

os.write(fd, config.render(
  script=os.path.basename(__file__),
  range_start=netaddr.IPNetwork(prefix_list[0])[101],
  range_end=netaddr.IPNetwork(prefix_list[0])[200],
  prefix_start=delegations[1].ip,
  prefix_end=delegations[2].ip,
  subnet6=myprefix_list[0]
  )
)
os.close(fd)

if cmp(temp_file, '/etc/dhcp/dhcpd6.conf'):
  print("same")
else:
  print("updating dhcp6.conf")
  copyfile(temp_file, '/etc/dhcp/dhcpd6.conf')
  os.remove(temp_file)
  subprocess.call(['systemctl', 'restart', 'dhcpd6'])
